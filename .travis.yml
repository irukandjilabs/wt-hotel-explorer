language: node_js
node_js:
- node
install: case $TRAVIS_BRANCH in greenkeeper*) npm i;; *) npm ci;; esac;
cache:
  directories:
  - node_modules
  - "$HOME/.npm"
jobs:
  include:
  - stage: test
    script:
    - npm run lint && npm run test && npm run coverage
  - stage: Build docker image and upload to AWS
    sudo: true
    services:
    - docker
    install: true
    if: tag IS present
    script:
    - pip install --user awscli
    - export PATH=$PATH:$HOME/.local/bin
    - docker build --build-arg NODE_ENV=production --build-arg GIT_REV=`git rev-parse
      --short HEAD` -t windingtree/wt-hotel-explorer:$TRAVIS_BRANCH .
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push windingtree/wt-hotel-explorer:$TRAVIS_BRANCH
  - stage: release-playground
    install: true
    if: branch = release/playground
    script:
    - pip install --user awscli
    - export PATH=$PATH:$HOME/.local/bin
    - export CF_ROOT=$CF_ROOT_PLAYGROUND
    - npm run deploy-aws-playground
  - stage: release-demo
    install: true
    if: branch = release/demo
    script:
    - pip install --user awscli
    - export PATH=$PATH:$HOME/.local/bin
    - export CF_ROOT=$CF_ROOT_DEMO
    - npm run deploy-aws-demo
env:
  global:
  - secure: 3GRN+gQfwBl7kYJ5euuiv9BWKFB2Hn8Lmwk8ebdyS+2Bqlzy2a/83uMx9Ru7qdRywXIsLEUeHAApiQ8ca4nOxneoZd19SSlOTDNze6XnjE6Vr618knl9PdBvQGWbia7ODNQF2uWRU4dEOatbebJ3Z/ZVXrfyD6dQWOpUD7Ho/6CwwjDkQoKpcueybsS6ujyXe+yzA5iM2zNMuqPD0aYsVKzqyrGxD5pz8PGxpNgPVFIv2EA3VvrcThrf7DNzghcMnrFeSi9/nU1cMf0EevF+pxVcR8rX9Aik97QYn9hgZLMbHPplEu+MEQHFuLM22rMh6cqkNOZGKGgnj7Dv1fqc56FQftVt2Gp79QhICQBkWc3Sflh7o+lvmjCtBmhkfGrDv5D78k8s53cbUX3CHKONbHFIelnJB+ZzZ/OyqVCb7YYXesUj5GRcXZQIMRZyMq6K0hcbudB5GENrV9DdLcYJVB+K5g5AhqxxStHAEfXhPxx2sIr6EBDaSndj84nzhFxYWnfQFdkshGtsJp5JFY7IuOH3o9vdFE0kqbTu1yOtlZHS0DPPZeupNLcBp/OnZm8B0Inbp+p39vIo8CvyvTYIyFh1yTCq1nFHHW/NDNwT+8oX2mH3PGXPzFjGR9x50e+5vd5VLVCY6aJvep+L2+QERJ7goGF6hyf4VpRWBm/Yhr0=
  - secure: EvP8YrTcwc8NL80Yb6Koo4E9I9U5FeduQYRqIMbg5k+bBLI8FK0cYqkrJIZcRYzF7MQE3sZMCZqqlns25kGikVPbUUmIzHwvaulLTT/sKM2xOOZf6kYV9j3clVz8y7WtZMumWgnPxMsGOgmWepKHxkrkAOP+15IBrX+FPAHpcvoUvggebzOShR1hG3TgXKwQ4/nFl4gIthn53AG9vhoWyqraqKi7BL+ph0HS3i6YbogAeXdHgL10TjSfUmmTBCEBph2pOry8l7L2zKTJsBRLAgmMWzklR4jPsM8x5R3Zbc3ZKqrw0HTIl9FD8gzVHAl8MKvYtdGKi0rDoNhCj2VbI9efTK9YdAxaJU3nuYmjVwl4vmqPBOQ/hA5L6FRX8krgJjfWYGmpqKSAQhe7OZUOge5jZ0XA2ocRIpjcU878Am6LYYBcGyTcTxmOzngIuNS/7Nu0nWbxBkgsib+xZOB3Cqb2vtsaPO71EOFakzK3vvlxRbkjkfWvZj4WYIHstVbbGcGulokjPSOnBqHsS9r97lF7x1A3FYJF0kcgqSokEUI0q630cUrYBgOqS4nd9SjcqHwwmvF9gFHgYRL9xkiqpmwb0vcpQPYZ0vMZ2xYH3Bh8OxipD8PsZAQ07pXSWYFiCl1793pOJTBngRCWncf0jIA+jG1cWBV14GIl224gED8=
  - secure: fEwltP3RbQyqKpk8CgiLvJPM0zOvyKXwfNJdEfb8p+RXuhB//O64g8pniiDNC7+jrV8oc9ruYN9mOPPhUb4AEayYoNcDbbaFlBRfKuwJ0df8/yp1KbLy/xNzeUdPHMMYRH61INoGoirBunt/96tgOAoSCuaxD5Q0fJQyGh6PLHyn2RIEq0e0tOCvuz1SuH4fZ17kt5MCkNQQdHW6UPgOThoERyzxD7v+NHf6U2RTv0kBrCHHoYkGJfBhDe5gnFLU33WDzuCIATx9QLRICIUVJVO1q+/2RaX6B7rO0ZKYzjN5rpv0cfwNYf58MJAJl90x66vNrDPzq2CXvauJAk5/MDds3r/BTWHGA2VthtdR2Jey7b5xQxkW/7pANZExqFg1XnMduGKgW+dY+o+gmlLTJbDDTlCTeOADRApdnsajyAkX5hGFlU0DtsEB2UWQ0B1QQlWZCDd2z/8lAdbeZSI9Y54uKlmfnnhuRXTYKmjmhsVBtT2C+pJtwmn7IRNlrA/Mn0Y9bM68U3/9mY8QgSLjni8W/4oUOlmfx5XvZALcO3zxRvmq1dQlRqLuaduVl6bqIqqGKGHVBk777PXI6oDkWqifVfbrCMY3f+leuCdWyURXQrnnW7tFGhnVwZysWnNNIb0MJnDqiunwmNABYV/WbRZzvTm9BvKz40bhxKVGKwI=
  - secure: b9tVrHQQ9dg7oBnQDbJI52spZsT4K8u2w4R4qfF4STGkdACbUpp9T7HAjJAGG8uXtB2HDfTSVgTFqpj60gETzjdJwdsTEkr3+VTNYig8S+8B107e2i2mtO2Fr/W80JKy7ZlZ4eKy4HUDXkvBCUFptrZZG90Kus1VJacLWzTJ4Z/gTJavKJyUaPxbMqY3Y3rWqg6jmEHe/QwyPKjQTYSRdGTJFGzjssua5VYeIeCHYS2lWi1lYxNl0G3f9vUGNhwzRfU4aWXt0R2tRETHyEg2wkIKWyuoqKYihy9yFZyELFELxzSziaBlwkokbc3mk4B1498jHGfrHJRZQ5LxEkrqQp6Uc/dTpvzWJ9zcl3i5yhztpe0mgmjJorLrT6JpopPlLBXKd5SMRBv73NPdE7sPtXRTmTHqjUDziUKiKfpoAzAdLuYvvBMhpCq3fcmxxgBZXSvv9DYernZGomfCYBYCfFQNAr4ILilvebjkh6soO6uLOMag4VDyZVaFtlZ3dzIAFjdDV4L3CCOFdrN+QVVoQK0AxIisSaCKOL8sJZcTW34wuw66FYXnMaNRxrsotNdMc7NTahQrfhbm2vpHh8Q/1xrBfhezd3C79mSP2JaJDNnG2sZz4ddfSNcnHIw3a1+aATmo4gT1Z0OIQuMUgxxyk7ktsivnTwpsG1HBgvExtWY=
  - secure: lboSjHx/LBqnNzEKSr+g57xRa00abICkkdTo+usTkNwJ3g9qF+4PrO24yptcvHjTH2rwA9yvNEBnieYG7bxqZTgDtCFm1rf80x3TITGh8ePALjpgr4Bf77KCYlofjv7jaQkiG+KxA5tM/MIk2hFXZCbUFHO6YRAcmbvtxUhxnZEi0bf6ABcnehT31Nue3IDCc1ekjFb8NL4mphIsSJMNPSOpygo8FeougVSDoRN8wm/v/52Fn1GHBO6pyxi3nAHrESbq/q1i9hkgWJR4fwtFGZweYcS9f7TniucUPEJpBCEPIlJsQwmiwki3SlcT+kiPOk7xg1QwnM5D52Gte15/K/IJRvA2tcgUnb5O52rYug4jFYUb/9lBrIXCYmvZOl6cVz8ViGs+uATYO/ljfVWsmmUAu1VPlAPAvmm9Df3CqBltSYdZi0xm6J3kargZ0jVD5G9r6FL7hNqPKV+iwW8AE/reMvRQ27efsR5KmLFcoXu1RUHJgDLFrda1RVcaggbeSUG4vRNtaorsE7FAIvcWYBhvxgMp2dockzsY+PeknTi9a4rAFepVQGgTILfBF64ZIXuIi/sE+pgwiXrTx8tGa+nc4Rl5BWRfHWFxoyTsqr6zPiH7NQPiy/pC8VW+q/bWo+hGB/4p1vYkzsOF5HLxUSaI1hmwetf189NsqGlDRFk=
  - secure: MN5CaFeaJ/liN+VyhnLYUAqDXR9U33HwQQlIgAHRFFVmDv8TQe5+lQ5ZnHeJJqls9mus9F3Y83sPICnyNA/qn84N6JI+0DQV+p/xwiNqsTIdbmAJEbzEzk4cy4z+Sk5bXT9l3cp8fTTPPUrNnWy/o1+C8ch/W5UarRluLJzKcNGtbflBrjGCjHk5zbqrTgEK2sxkVynfOofEUnajMAumeLhgAd4t7QbMpKL0gsEr9LIUKP8j5UDai7+7WWohczFxlYSRrTCGRd8oQdhd1lFca2fPD8bjodvSG8OBd0b9D11VP9zLyUJPQG9D1KOm3zS0Zp6uDgOZ6DCqc0g35QSyb3uc/HBf2C9b4G654xZKkMGdOo365gfohYSVkVmXFmYbQKSlN2IoPaPxmgZENLWwRzwSHhCGgvMbdD9IVvWneN+isfmrEmA27to/HpHteJS89hFJkYd+a1HZDYedGuxw8nsHuOR7kIiuRwzDUa3wEf1/k3jqHlN1/bPbTFDubnB9Obh4lXc5hn1embOTqLVP1ciQ+u5bATZ1gDy6ciTUyVx30f1PmSfgE4b9hLs9E8XYjQ3zBVNIYQGDvOT1N3C49IuUUIZZbhtLx0YOjyoR5NevLYLxh38b2eWM90Az9LQkPkv9el77G/f1LcPp9Tjg4c/+OPDtCyGNUs0xOMRfKvg=
  - secure: KjYoVx3WSFKvrMnMeLTl6YbeJ2xGm0w154UibtHUGTmVXtNGvuwy9a3b3b1tWV9usYnkuUHCBNI/0UJ8LjbGwdXKq28mxrkw0fXVSwvfRZMPY6vk4K7YeCEdKayhldVS4QPvYNjfFBQPjP5uOGc9Jwdfz+R4fRxOb7WqQteU4g+0+EbYGEPp05BXddeK7gByQbLrpClT0Qw6HqxP1rq3XzXgc9rak6sVmDBFRuXNTz79HZz/yKuI3855+rg5p4htKB1OgPJ5w70FiurZbL61nWRRSCF7F/5561ug+rsuUO2/3s05ILoAySf+IE5kokwKtUcyRz65w5XNeqGd1XyWhInNOASR7Ng7vaaW4Xe8vcfeZgzequnge75IRUnahk8n3cWxu7dRRjqAf1+hteySkYer+QuSheIEk/Qyo63Kgd/qqWSPihShNwTCjumJmFP1ma+MEmJvoMeRsh5lCaYO7cWXItyjE+EtAV01LlIoeFE7521Vx0B74WPRH3kCDSLku2cvvqcMx3Udvm4ad2m2rs2ORmupPByEcI60tU+PyO6StQPs6sjXrXvV/kroFyc35cdCwPbSeLkN5d/mRRborTERt9jsvJqZSbD8MrfiP+Csa0T8LFxNIVhJYCOKP0wsytiiJxvAjl57JtyiYRhwulUktRMwNpn5vd4mT7Yo87Q=
